import React, { useContext, useEffect, useState, useCallback } from 'react';
import { useHistory } from 'react-router';
import { Loader } from '../components/Loader';
import { AuthContext } from '../context/AuthContext';
import { useHttp } from '../hooks/http.hook';
import { useToast } from '../hooks/toast.hook';

const Cards = [
    {
        task: 1,
        name: 'Эффект губной помады',
        list: [
            {
                test: 'Гармоничность образа',
                dect: 'Оценивается общий вид модели: опрятность, чистота, ухоженность. Также оценивается на сколько конкурсант подчеркнул индивидуальность. Правильно подобранное визажное решение.'
            },
            {
                test: 'Форма',
                dect: 'Оценивается соответствие формы анатомическим особенностям строения лица, излишний выход за контур. Также насколько участник корректно и естественно подобрал форму для модели.'
            },
            {
                test: 'Цвет',
                dect: 'Оценивается гармоничное сочетание выбранных цветов пигмента по тону кожи модели.'
            },
            {
                test: 'Симметрия',
                dect: 'Оценивается насколько участник смог выровнить природную асимметрию исходя из анатомических исходных данных модели.'
            },
            {
                test: 'Контур',
                dect: 'Оценивается равномерность прокраса контура. Ровность линии контура. Правильный выбор типа контура (мало видный - средне видный - четко видный). Под индивидуальную форму губ модели (большие, маленькие и т.д.)'
            },
            {
                test: 'Прокрас',
                dect: 'Оценивается равномерный плотный прокрас по всей площади губ.'
            },
            {
                test: 'Травматизация',
                dect: 'Оценивается наличие засаженных точек, отека, проколов в виде тире, явное углубление, выходы за контур губ. <b>Чем меньше этих признаков тем выше балл.</b>'
            },
            {
                test: 'Сложность работы',
                dect: 'Оценивается сложность техники введения пигмента, а также кожа модели, использование перехода цветов.'
            },
            {
                test: 'Равномерность прокраса',
                dect: 'Одинаковое количество пикселей по контуру, общий вид растушевки.'
            }
        ]
    },
    {
        task: 2,
        name: 'Стрелка с прокрасом межресничного пространства и Растушевкой',
        list: [
            {
                test: 'Гармоничность образа',
                dect: 'Оценивается общий вид модели: опрятность, чистота, ухоженность. Также оценивается на сколько конкурсант подчеркнул индивидуальность. Правильно подобранное визажное решение.'
            },
            {
                test: 'Форма',
                dect: 'Оценивается насколько участник подобрал ширину и длину стрелочки, а также соответствия формы стрелки/растушёвки анатомическим особенностям строения глаз/лица.'
            },
            {
                test: 'Симметрия',
                dect: 'Оценивается насколько участник смог выровнять природную симметрию исходя из анатомических исходных данных модели.'
            },
            {
                test: 'Изящность',
                dect: 'Оценивается плавное истончение линии в хвостике и внутреннем углу глаза.'
            },
            {
                test: 'Градиент',
                dect: 'Оценивается насколько профессионально и плавно выполнен переход от светлых частей век к более тёмным.'
            },
            {
                test: 'Прокрас межресничного пространства',
                dect: 'Оценивается равномерное плотное окрашивание всей межресничной зоны.'
            },
            {
                test: 'Цвет',
                dect: 'Оценивается гармоничное сочетание выбранных цветов пигмента по тону кожи модели. Разрешенные цвета для использования - чёрный, серый и коричневый.'
            },
            {
                test: 'Травматизация',
                dect: 'Оценивается наличие засаженных точек, отека, проколов в виде тире, явное углубление, выходы за контур губ. <b>Чем меньше этих признаков тем выше балл.</b>'
            },
        ]
    },
    {
        task: 3,
        name: 'Растушевка',
        list: [
            {
                test: 'Гармоничность образа',
                dect: 'Оценивается общий вид модели: опрятность, чистота, ухоженность. Также оценивается на сколько конкурсант подчеркнул индивидуальность. Cyмел ли участник добиться индивидуальности.'
            },
            {
                test: 'Форма',
                dect: 'Оценивается гармоничная ширина, длина и пропорция брови в соответствии с анатомическим строением лица модели.'
            },
            {
                test: 'Цвет',
                dect: 'Оценивается гармоничность подбора цвета своей работы исходя из цветотипа модели, её цвета кожи, волос, и глаз.'
            },
            {
                test: 'Симметрия',
                dect: 'Оценивается насколько участник смог выровнить природную асимметрию брови исходя из анатомических исходных данных у модели'
            },
            {
                test: 'Травматизация',
                dect: 'Оценивается наличие засаженных точек, отека, проколов в виде тире, явное углубление, выходы за контур губ. <b>Чем меньше этих признаков тем выше балл.</b>'
            },
            {
                test: 'Оформление головки брови',
                dect: 'Оценивается симметричность по отношению одной брови ко второй брови, изящность и мягкость.'
            },
            {
                test: 'Градиент',
                dect: 'Оценивается плавность перехода цвета и интенсивность.'
            }
        ]
    },
    {
        task: 4,
        name: 'Микроблейдинг',
        list: [
            {
                test: 'Гармоничность образа',
                dect: 'Оценивается общий вид модели: опрятность, чистота, ухоженность. Гармоничность подбора формы и цвета в комплексе для данной модели. Также оценивается на сколько конкурсант подчеркнул индивидуальность. Cyмел ли участник добиться индивидуальности'
            },
            {
                test: 'Форма',
                dect: 'Оценивается насколько участник корректно и естественно подобрал форму для модели.'
            },
            {
                test: 'Естественность укладки волосков',
                dect: 'Оценивается соответствиe нанесенного рисунка приданой форме укладки брови модели.'
            },
            {
                test: 'Четкость и изящность волоска',
                dect: 'Оценивается равномерность и насыщенность цвета, прокраса волоска, изгиб, утонченность с двух сторон и толщина.'
            },
            {
                test: 'Правильное расстояние волосков друг от друга',
                dect: 'Оценивается допустимoе расстояниe между волосками.'
            },
            {
                test: 'Цвет',
                dect: 'Оценивается гармоничность подбора цвета брови исходя из цветотипа модели, ее цвета кожи, волос и глаз.'
            },
            {
                test: 'Симметрия',
                dect: 'Оценивается насколько участник смог выровнять природную асимметрию исходя из анатомических исходных данных, а также симметричность деталей губ относительно друг к другу. И симметричность укладки волоска на двух бровях.'
            },
            {
                test: 'Травматизация',
                dect: 'Оценивается наличие засаженных линий, отека, нахлёст одного волоска на другой , явное покраснение. <b>Чем меньше этих признаков тем выше балл.</b>'
            },
            {
                test: 'Сложность работы',
                dect: 'Оценивается также кожа модели и первоначальное наличие своих природных волосков.'
            },
            {
                test: 'Укладка волосков',
                dect: 'Оценивается сложность рисунка укладки волосков. Гармоничность подбора укладки волосков под уже имеющиеся волоски на бровях модели. Выделение темных и светлых зон бровей.'
            }
        ]
    },
    {
        task: 5,
        name: 'Bолосковая техника',
        list: [
            {
                test: 'Гармоничность образа',
                dect: 'Оценивается общий вид модели: опрятность, чистота, ухоженность. Гармоничность подбора формы и цвета в комплексе для данной модели. Также оценивается на сколько конкурсант подчеркнул индивидуальность. Cyмел ли участник добиться индивидуальности'
            },
            {
                test: 'Форма',
                dect: 'Оценивается насколько участник корректно и естественно подобрал форму для модели.'
            },
            {
                test: 'Естественность укладки волосков',
                dect: 'Оценивается соответствиe нанесенного рисунка приданой форме укладки брови модели.'
            },
            {
                test: 'Четкость и изящность волоска',
                dect: 'Оценивается равномерность и насыщенность цвета, прокраса волоска, изгиб, утонченность с двух сторон и толщина.'
            },
            {
                test: 'Правильное расстояние волосков друг от друга',
                dect: 'Оценивается допустимoе расстояниe между волосками.'
            },
            {
                test: 'Цвет',
                dect: 'Оценивается гармоничность подбора цвета брови исходя из цветотипа модели, ее цвета кожи, волос и глаз.'
            },
            {
                test: 'Симметрия',
                dect: 'Оценивается насколько участник смог выровнять природную асимметрию исходя из анатомических исходных данных, а также симметричность деталей губ относительно друг к другу. И симметричность укладки волоска на двух бровях.'
            },
            {
                test: 'Травматизация',
                dect: 'Оценивается наличие засаженных линий, отека, нахлёст одного волоска на другой , явное покраснение. <b>Чем меньше этих признаков тем выше балл.</b>'
            },
            {
                test: 'Сложность работы',
                dect: 'Оценивается также кожа модели и первоначальное наличие своих природных волосков.'
            },
            {
                test: 'Укладка волосков',
                dect: 'Оценивается сложность рисунка укладки волосков. Гармоничность подбора укладки волосков под уже имеющиеся волоски на бровях модели. Выделение темных и светлых зон бровей.'
            }
        ]
    }
];

const ReadyBtn = props => {
    return (
        <div className="row center">
            <button className="waves-effect waves-light btn-large col s4 offset-s4" onClick={props.onClick}>Начать</button>
        </div>
    );
}

const WaitRfid = () => {
    return (
        <div>
            <h5 className="teal-text text-accent-4 center mb-5">
                Дождитесь приглашения на табло участника и приложите метку...
            </h5>
            <Loader />
        </div>
    );
}

export const RefereePage = () => {
    const auth = useContext(AuthContext);
    const history = useHistory();
    const toast = useToast();
    const {request} = useHttp();
    const [step, setStep] = useState('OFF');

    const getStatus = useCallback (async () => {
        try {
            const msgFromSrv = await request('/api/device/status', 'GET', null, { Authorization: `Bearer ${auth.token}` });
            if (msgFromSrv?.status !== 'SUCCESS') {
                setTimeout(getStatus, 2000);
                return;
            }

            const rfid = msgFromSrv.value;
            const data = await request('/api/model/get-model', 'POST', { rfid }, { Authorization: `Bearer ${auth.token}` });
            if ( data?.model ) {
                const model = JSON.parse(data.model)[0];
                let path = null;
                switch (model.task) {
                    case '1' : {
                        path = '/lips';
                        break;
                    }
                    case '2' : {
                        path = '/arrow';
                        break;
                    }
                    case '3' : {
                        path = '/feathering';
                        break;
                    }
                    case '4' : {
                        path = '/microblading';
                        break;
                    }
                    case '5' : {
                        path = '/hair';
                        break;
                    }
                    default : path = null;
                }
                if ( path ) {
                    history.push(path);
                    return;
                }
            }
            throw new Error('Ошибка получения участника');
        }
        catch (e) {
            toast(e);
            setStep('OFF');
        }
    }, [request, auth.token, toast, history]);

    const readInit = useCallback (async () => {
        try {
            await request('/api/device/master-init-read', 'POST', null, { Authorization: `Bearer ${auth.token}` });
            getStatus();
        }
        catch (e) {}
    }, [request, auth.token, getStatus]);

    useEffect(() => {
        switch (step) {
            case 'OFF' : {
                break;
            }
            case 'WAIT-RFID' : {
                readInit();
                break;
            }
            default : {
                break;
            }
        }
    }, [step, readInit]);

    return(
        <div>
            {(step === 'OFF') && <ReadyBtn onClick={() => setStep('WAIT-RFID')} />}
            {(step === 'WAIT-RFID')  && <WaitRfid />}
        </div>
    );
}